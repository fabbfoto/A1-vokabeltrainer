// shared/utils/error-reset.ts
// Utility f√ºr das Zur√ºcksetzen von Fehlerz√§hlern in √úbungen

import type { ModeId } from '../types/trainer';

/**
 * Setzt die Fehlerz√§hler f√ºr eine neue √úbung zur√ºck
 * Wird nur f√ºr normale √úbungen aufgerufen, NICHT f√ºr Wiederholungen oder Tests
 * 
 * @param state - Der aktuelle Trainer-State
 * @param modeId - Der Modus, f√ºr den die Fehlerz√§hler zur√ºckgesetzt werden sollen
 * @param saveWordsToRepeat - Funktion zum Speichern der Words-to-Repeat
 */
export function resetErrorCountsForNewExercise(
    state: any, 
    modeId: ModeId, 
    saveWordsToRepeat: () => void
): void {
    console.log('üîÑ Setze Fehlerz√§hler f√ºr neue √úbung zur√ºck...');
    
    // 1. Aktuelle √úbungsz√§hler zur√ºcksetzen
    state.training.correctInCurrentRound = 0;
    state.training.attemptedInCurrentRound = 0;
    
    // 2. Fehlerz√§hler f√ºr diesen Modus zur√ºcksetzen
    if (state.progress.wordsToRepeatByMode[modeId]) {
        state.progress.wordsToRepeatByMode[modeId] = new Set();
        saveWordsToRepeat();
        console.log(`üóëÔ∏è Fehlerz√§hler f√ºr Modus ${modeId} zur√ºckgesetzt`);
    }
    
    // 3. localStorage direkt l√∂schen (da Firebase-Services keine saveWordsToRepeat haben)
    localStorage.removeItem('trainer-words-to-repeat');
    console.log(`üóëÔ∏è localStorage 'trainer-words-to-repeat' gel√∂scht`);
    
    // 4. Firebase Progress zur√ºcksetzen (falls verf√ºgbar)
    if ((window as any).firebaseSyncService) {
        try {
            // Leeren Progress an Firebase senden
            const emptyProgress = {};
            (window as any).firebaseSyncService.saveProgress(emptyProgress);
            console.log(`‚òÅÔ∏è Firebase Progress zur√ºckgesetzt`);
        } catch (error) {
            console.warn('‚ö†Ô∏è Fehler beim Firebase-Reset:', error);
        }
    }
}

/**
 * Vollst√§ndiger Reset aller Fehlerz√§hler (f√ºr manuelle Aufrufe)
 * Setzt alle Fehlerz√§hler f√ºr alle Modi zur√ºck
 * 
 * @param state - Der aktuelle Trainer-State
 * @param saveWordsToRepeat - Funktion zum Speichern der Words-to-Repeat
 */
export function resetAllErrorCounts(
    state: any, 
    saveWordsToRepeat: () => void
): void {
    console.log('üîÑ Setze ALLE Fehlerz√§hler zur√ºck...');
    
    // 1. State zur√ºcksetzen
    state.training.correctInCurrentRound = 0;
    state.training.attemptedInCurrentRound = 0;
    state.progress.wordsToRepeatByMode = {};
    
    // 2. localStorage l√∂schen
    localStorage.removeItem('trainer-words-to-repeat');
    console.log('üóëÔ∏è localStorage "trainer-words-to-repeat" gel√∂scht');
    
    // 3. Speichern
    saveWordsToRepeat();
    
    // 4. Firebase zur√ºcksetzen (falls verf√ºgbar)
    if ((window as any).firebaseSyncService) {
        try {
            const emptyProgress = {};
            (window as any).firebaseSyncService.saveProgress(emptyProgress);
            console.log('‚òÅÔ∏è Firebase Progress zur√ºckgesetzt');
        } catch (error) {
            console.warn('‚ö†Ô∏è Fehler beim Firebase-Reset:', error);
        }
    }
    
    console.log('‚úÖ Alle Fehlerz√§hler erfolgreich zur√ºckgesetzt');
}

/**
 * Pr√ºft, ob Fehlerz√§hler f√ºr einen bestimmten Modus vorhanden sind
 * 
 * @param state - Der aktuelle Trainer-State
 * @param modeId - Der zu pr√ºfende Modus
 * @returns true wenn Fehler vorhanden sind, false sonst
 */
export function hasErrorCounts(state: any, modeId: ModeId): boolean {
    const errorSet = state.progress.wordsToRepeatByMode[modeId];
    return errorSet && errorSet.size > 0;
}

/**
 * Gibt die Anzahl der Fehler f√ºr einen bestimmten Modus zur√ºck
 * 
 * @param state - Der aktuelle Trainer-State
 * @param modeId - Der zu pr√ºfende Modus
 * @returns Anzahl der Fehler
 */
export function getErrorCount(state: any, modeId: ModeId): number {
    const errorSet = state.progress.wordsToRepeatByMode[modeId];
    return errorSet ? errorSet.size : 0;
} 